{"version":3,"file":"rpg-dialogue-main.js","mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,cAAc;AACd,YAAY,mBAAO,CAAC,gCAAO;AAC3B,uBAAuB,mBAAO,CAAC,sDAAkB;AACjD,wBAAwB,mBAAO,CAAC,wEAAiB;AACjD,yBAAyB,mBAAO,CAAC,0DAAoB;AACrD,sBAAsB,mBAAO,CAAC,oDAAiB;AAC/C,uBAAuB,mBAAO,CAAC,sDAAkB;AACjD,qBAAqB,mBAAO,CAAC,kDAAgB;AAC7C,iBAAiB,mBAAO,CAAC,8GAA2C;AACpE,cAAc,mBAAO,CAAC,oCAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6BAA6B,gBAAgB,GAAG;AACpE;AACA,yBAAyB,yBAAyB,8BAA8B,aAAa,YAAY;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD,cAAc;AACd;;;;;;;;;;;AChRa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,8BAA8B,mBAAO,CAAC,0DAAO;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uCAAuC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,eAAe,oBAAoB;AACnC,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD,wBAAwB;AACxB;;;;;;;;;;;AChPa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B,GAAG,oBAAoB;AACrD,wBAAwB,mBAAO,CAAC,wEAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,sDAAsD;AAC/H,yEAAyE,sDAAsD;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,sDAAsD;AAC7F;AACA;AACA;AACA;AACA,yEAAyE,sDAAsD;AAC/H;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;AACD,8BAA8B;AAC9B;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;;;;;;;;;;;AC/Ka;AACb;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,aAAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;;;;;;;;;;AC3Ba;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,qBAAqB,mBAAO,CAAC,kDAAgB;AAC7C,sBAAsB,mBAAO,CAAC,oDAAiB;AAC/C,cAAc,mBAAO,CAAC,oCAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgwBAAwB,mEAAmE;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,SAAS;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,yDAAyD;AACzD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,qBAAqB;AACrB;;;;;;;;;;;ACzca;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,wBAAwB,mBAAO,CAAC,wEAAiB;AACjD,mBAAmB,mBAAO,CAAC,8CAAc;AACzC,uBAAuB,mBAAO,CAAC,sDAAkB;AACjD,oBAAoB,mBAAO,CAAC,gDAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;AACpB;;;;;;;;;;;AC7ba;AACb;AACA;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAO,CAAC,wEAAiB;AACjD,sBAAsB,mBAAO,CAAC,oDAAiB;AAC/C,yBAAyB,mBAAO,CAAC,8IAA2D;AAC5F,cAAc,mBAAO,CAAC,gIAAoD;AAC1E,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wIAAwI,uBAAuB,eAAe;AAC9K;AACA;AACA;AACA,gCAAgC,gEAAgE;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wBAAwB;AAC5D;AACA,gCAAgC,wBAAwB;AACxD,mMAAmM,uBAAuB,uDAAuD;AACjR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,SAAS,8CAA8C;AACtE,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,sBAAsB;AACtB;;;;;;;;;;ACpLA,YAAY,iBAAiB;AAC7B,YAAY,gBAAgB;AAC5B,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB,YAAY,MAAM;AAClB,YAAY,sBAAsB;AAClC,YAAY,QAAQ;AACpB,YAAY,mBAAmB;AAC/B,YAAY,eAAe;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,iBAAiB;AAC7B,YAAY,gBAAgB;AAC5B,YAAY,eAAe;AAC3B,YAAY,SAAS;AACrB,YAAY,MAAM;AAClB,YAAY,sBAAsB;AAClC,YAAY,QAAQ;AACpB,YAAY,mBAAmB;AAC/B,YAAY,eAAe;;AAE3B,iBAAiB,2DAAoB;AACrC;AACA,4BAA4B,4FAA0C;AACtE,8BAA8B,kGAA8C;AAC5E,2BAA2B,mFAAqC;AAChE,iCAAiC,2FAA4C;AAC7E,mBAAmB,iEAAwB;AAC3C,0BAA0B,wFAAuC;AACjE,0BAA0B,sFAAsC;AAChE,oBAAoB,oEAA0B;;AAE9C;;;;;;;;;;;;ACpDa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,WAAW;AACX;;;;;;;;;;;ACrBa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,cAAc,mBAAO,CAAC,oCAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,2CAA2C;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,iBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA,CAAC;AACD,2BAA2B;AAC3B;;;;;;;;;;;ACjHa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,aAAa;AACb;;;;;;UCvJA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://rpg-dialogue/./dist/cjs/Editor.js","webpack://rpg-dialogue/./dist/cjs/RPGDialogueLogic.js","webpack://rpg-dialogue/./dist/cjs/TouchHandler.js","webpack://rpg-dialogue/./dist/cjs/detectDarkMode.js","webpack://rpg-dialogue/./dist/cjs/domHelpers.js","webpack://rpg-dialogue/./dist/cjs/editorHelpers.js","webpack://rpg-dialogue/./dist/cjs/editorRenderer.js","webpack://rpg-dialogue/./dist/cjs/entry.js","webpack://rpg-dialogue/./dist/cjs/gup.js","webpack://rpg-dialogue/./dist/cjs/metaHelpers.js","webpack://rpg-dialogue/./dist/cjs/modal.js","webpack://rpg-dialogue/webpack/bootstrap","webpack://rpg-dialogue/webpack/runtime/chunk loaded","webpack://rpg-dialogue/webpack/runtime/define property getters","webpack://rpg-dialogue/webpack/runtime/global","webpack://rpg-dialogue/webpack/runtime/hasOwnProperty shorthand","webpack://rpg-dialogue/webpack/runtime/make namespace object","webpack://rpg-dialogue/webpack/runtime/jsonp chunk loading","webpack://rpg-dialogue/webpack/before-startup","webpack://rpg-dialogue/webpack/startup","webpack://rpg-dialogue/webpack/after-startup"],"sourcesContent":["\"use strict\";\n/**\n * A script for demonstrating the line-point-distance.\n *\n * @require PlotBoilerplate, MouseHandler, gup, dat.gui\n *\n * @author   Ikaros Kappler\n * @date     2023-07-25\n * @version  1.0.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Editor = void 0;\nvar gup_1 = require(\"./gup\");\nvar detectDarkMode_1 = require(\"./detectDarkMode\");\nvar plotboilerplate_1 = require(\"plotboilerplate\");\nvar RPGDialogueLogic_1 = require(\"./RPGDialogueLogic\");\nvar editorHelpers_1 = require(\"./editorHelpers\");\nvar editorRenderer_1 = require(\"./editorRenderer\");\nvar TouchHandler_1 = require(\"./TouchHandler\");\nvar FileDrop_1 = require(\"plotboilerplate/src/cjs/utils/io/FileDrop\");\nvar modal_1 = require(\"./modal\");\nvar Editor = /** @class */ (function () {\n    function Editor(dialogueConfigJSONPath, isRecoveryFromLocalStorageActive) {\n        this.currentMouseHandler = null;\n        this.currentTouchHandler = null;\n        var _self = this;\n        console.log(\"Initialize plotboilerplate\");\n        // Fetch the GET params\n        var GUP = (0, gup_1.gup)();\n        var isDarkmode = (0, detectDarkMode_1.detectDarkMode)(GUP);\n        // All config params are optional.\n        this.pb = new plotboilerplate_1.PlotBoilerplate(plotboilerplate_1.PlotBoilerplate.utils.safeMergeByKeys({\n            canvas: document.getElementById(\"my-canvas\"),\n            fullSize: true,\n            fitToParent: true,\n            scaleX: 1.0,\n            scaleY: 1.0,\n            rasterGrid: true,\n            drawOrigin: false,\n            rasterAdjustFactor: 2.0,\n            redrawOnResize: true,\n            defaultCanvasWidth: 1024,\n            defaultCanvasHeight: 768,\n            canvasWidthFactor: 1.0,\n            canvasHeightFactor: 1.0,\n            cssScaleX: 1.0,\n            cssScaleY: 1.0,\n            cssUniformScale: true,\n            autoAdjustOffset: true,\n            offsetAdjustXPercent: 50,\n            offsetAdjustYPercent: 50,\n            backgroundColor: isDarkmode ? \"#000000\" : \"#ffffff\",\n            enableMouse: true,\n            enableKeys: true\n        }, GUP));\n        var boxSize = {\n            width: 120,\n            height: 20\n        };\n        this.editorHelpers = new editorHelpers_1.EditorHelper(this, this.pb, boxSize);\n        this.editorRenderer = new editorRenderer_1.EditorRenderer(this.pb, boxSize, this.editorHelpers, isDarkmode);\n        // +---------------------------------------------------------------------------------\n        // | The render method.\n        // +-------------------------------\n        this.pb.config.postDraw = function (draw, fill) {\n            if (!_self.dialogConfig) {\n                return;\n            }\n            _self.editorRenderer.renderBoxes(_self.dialogConfig);\n            _self.editorRenderer.renderConnections(_self.dialogConfig);\n        };\n        if (isRecoveryFromLocalStorageActive) {\n            console.log(\"Trying to recover config from localstorage.\");\n            this.tryLoadFromLocalStorage()\n                .then(function (dc) {\n                _self.handleDialogConfigLoaded(dc);\n            })\n                .catch(function () {\n                console.log(\"Loading from localstorage failed. Falling back loading from specified path.\");\n                _self.tryLoadFromJSON(dialogueConfigJSONPath);\n            });\n        }\n        else {\n            _self.tryLoadFromJSON(dialogueConfigJSONPath);\n        }\n        // Install DnD with FileDrop\n        var fileDrop = new FileDrop_1.FileDrop(this.pb.eventCatcher);\n        fileDrop.onFileJSONDropped(function (jsonObject) {\n            console.log(\"[onFileJSONDropped] jsonObject\", jsonObject);\n            // TODO: properly convert to dialog-config\n            _self.handleDialogConfigLoaded(editorHelpers_1.EditorHelper.fromObject(jsonObject));\n        });\n        // Also accept uploads via button\n        var importJSON = function () {\n            document.getElementById(\"input-upload-file\").click();\n        };\n        document.getElementById(\"b-import-json\").addEventListener(\"click\", importJSON);\n        document.getElementById(\"input-upload-file\").addEventListener(\"change\", function (_evt) {\n            var fileInput = document.getElementById(\"input-upload-file\");\n            if (!fileInput.files || fileInput.files.length === 0) {\n                return;\n            }\n            console.log(\"inputFile\", fileInput.files[0]);\n            var reader = new FileReader();\n            reader.onload = function () {\n                var jsonText = reader.result;\n                console.log(reader.result);\n                _self.handleDialogConfigLoaded(editorHelpers_1.EditorHelper.fromObject(JSON.parse(jsonText)));\n            };\n            reader.readAsText(fileInput.files[0]);\n        });\n        document.getElementById(\"b-run-test\").addEventListener(\"click\", function () {\n            _self.testCurrentDialogueConfig();\n        });\n        document.getElementById(\"b-new\").addEventListener(\"click\", _self.requestCreateNewGraph());\n        document.getElementById(\"b-show-json\").addEventListener(\"click\", _self.showJSON());\n        document.getElementById(\"b-goto-github\").addEventListener(\"click\", function () {\n            window.open(\"https://github.com/IkarosKappler/rpg-dialogue\", \"_blank\");\n        });\n    }\n    Editor.prototype.tryStartAutosaveLoop = function () {\n        if (this.autosaveTimer) {\n            return;\n        }\n        var _self = this;\n        this.autosaveTimer = globalThis.setInterval(function () {\n            _self.tryAutoSave();\n        }, 10000);\n    };\n    Editor.prototype.tryAutoSave = function () {\n        if (this.editorHelpers.domHelper.isAutoSave()) {\n            // console.log(\"Putting to localstorage.\");\n            this.putToLocalStorage();\n        }\n    };\n    Editor.prototype.requestCreateNewGraph = function () {\n        var _self = this;\n        return function () {\n            _self.editorHelpers.domHelper.modal.setTitle(\"Drop current graph?\");\n            _self.editorHelpers.domHelper.modal.setBody(\"Do you really want to create a new graph and lose unsaved changes?\");\n            _self.editorHelpers.domHelper.modal.setFooter(\"\");\n            _self.editorHelpers.domHelper.modal.setActions([\n                modal_1.Modal.ACTION_CANCEL,\n                {\n                    label: \"Yes\",\n                    action: function () {\n                        _self.editorHelpers.domHelper.modal.close();\n                        _self.performNewGraph();\n                    }\n                }\n            ]);\n            _self.editorHelpers.domHelper.modal.open();\n        };\n    };\n    Editor.prototype.performNewGraph = function () {\n        var newConfig = {\n            meta: { name: \"dialogue_A\", npcs: [{ name: \"NPC #0\" }] },\n            graph: {\n                intro: { q: \"Hello world!\", o: [{ a: \"Hello, NPC!\", next: null }], editor: { position: { x: 0, y: 0 } } }\n            }\n        };\n        this.handleDialogConfigLoaded(newConfig);\n    };\n    Editor.prototype.showJSON = function () {\n        var _self = this;\n        return function () {\n            var removePositions = _self.editorHelpers.domHelper.isExportWithoutPositions();\n            var dConfig = removePositions\n                ? editorHelpers_1.EditorHelper.removePositions(_self.editorHelpers.dialogConfigWithPositions)\n                : _self.editorHelpers.dialogConfigWithPositions;\n            var jsonString = JSON.stringify(dConfig, null, 4);\n            var jsonArea = document.createElement(\"textarea\");\n            jsonArea.setAttribute(\"readonly\", \"true\");\n            jsonArea.innerHTML = jsonString;\n            jsonArea.classList.add(\"json-preview\");\n            _self.editorHelpers.domHelper.modal.setTitle(\"Current Graph as JSON\");\n            _self.editorHelpers.domHelper.modal.setBody(jsonArea);\n            _self.editorHelpers.domHelper.modal.setFooter(\"\");\n            _self.editorHelpers.domHelper.modal.setActions([modal_1.Modal.ACTION_CLOSE]);\n            _self.editorHelpers.domHelper.modal.open();\n        };\n    };\n    /**\n     * Open a modal and test the current dialogue config (runs a RPGDialogueLogic instant).\n     */\n    Editor.prototype.testCurrentDialogueConfig = function () {\n        var _self = this;\n        // Create this structure:\n        // <div class=\"rpg-output\">\n        //    <div class=\"rpg-output-question\"></div>\n        //    <ul class=\"rpg-output-options\"></ul>\n        // </div>\n        var outputContainer = document.createElement(\"div\");\n        var outputQuestion = document.createElement(\"div\");\n        var outputOptions = document.createElement(\"ul\");\n        outputContainer.classList.add(\"rpg-output\");\n        outputQuestion.classList.add(\"rpg-output-question\");\n        outputOptions.classList.add(\"rpg-output-options\");\n        outputContainer.appendChild(outputQuestion);\n        outputContainer.appendChild(outputOptions);\n        var dialogueListener = function (dialogueConfig, nextNodeName, oldNodeName, selectedOptionIndex) {\n            // Highlight current node in the graph editor :)\n            // console.log(\"nextNodeName\", nextNodeName, \"oldNodeName\", oldNodeName, \"selectedOptionIndex\", selectedOptionIndex);\n            _self.editorHelpers.setHighlightedNode(nextNodeName);\n        };\n        var rpgLogic = new RPGDialogueLogic_1.RPGDialogueLogic(this.dialogConfig, false);\n        rpgLogic.addDialogueChangeListener(dialogueListener);\n        var alternateStartNodeName = this.editorHelpers.selectedNodeName;\n        this.editorHelpers.setSelectedNode(null, null);\n        rpgLogic.beginConversation(outputQuestion, outputOptions, alternateStartNodeName);\n        this.editorHelpers.domHelper.modal.setTitle(\"Test\");\n        this.editorHelpers.domHelper.modal.setBody(outputContainer);\n        this.editorHelpers.domHelper.modal.setFooter(\"\");\n        this.editorHelpers.domHelper.modal.setActions([modal_1.Modal.ACTION_CLOSE]);\n        this.editorHelpers.domHelper.modal.open();\n    };\n    Editor.prototype.handleDialogConfigLoaded = function (config) {\n        // Check if all graph nodes have positions to render.\n        this.dialogConfig = this.editorHelpers.enrichPositions(config);\n        this.editorHelpers.enrichMetaData(this.dialogConfig);\n        console.log(\"Enriched meta data\", this.dialogConfig);\n        this.editorHelpers.setDialogConfig(this.dialogConfig);\n        // Ad DnD support for boxes.\n        if (this.currentMouseHandler) {\n            this.currentMouseHandler.destroy();\n            this.currentMouseHandler = null;\n        }\n        this.currentMouseHandler = this.editorHelpers.boxMovehandler(); // dialogConfig);\n        // Ad DnD support for boxes.\n        if (this.currentTouchHandler) {\n            this.currentTouchHandler.destroy();\n            this.currentTouchHandler = null;\n        }\n        this.currentTouchHandler = new TouchHandler_1.TouchHandler(this.pb, this.dialogConfig, this.editorHelpers);\n        this.pb.redraw();\n        this.tryStartAutosaveLoop();\n    };\n    Editor.prototype.putToLocalStorage = function () {\n        var jsonString = JSON.stringify(this.dialogConfig);\n        globalThis.localStorage.setItem(\"__rpgeditor.dialogueconfig\", jsonString);\n    };\n    Editor.prototype.tryLoadFromJSON = function (dialogueConfigJSONPath) {\n        var _self = this;\n        RPGDialogueLogic_1.RPGDialogueLogic.loadConfigFromJSON(dialogueConfigJSONPath).then(function (config) {\n            console.log(\"structure\", config);\n            _self.handleDialogConfigLoaded(config);\n        });\n    };\n    Editor.prototype.tryLoadFromLocalStorage = function () {\n        return new Promise(function (accept, reject) {\n            var jsonString = globalThis.localStorage.getItem(\"__rpgeditor.dialogueconfig\");\n            if (!jsonString || jsonString === \"\") {\n                reject();\n            }\n            try {\n                var jsonObject = JSON.parse(jsonString);\n                if (!jsonObject) {\n                    reject();\n                    return;\n                }\n                var dialogueConfig = editorHelpers_1.EditorHelper.fromObject(jsonObject);\n                accept(dialogueConfig);\n            }\n            catch (exception) {\n                console.warn(exception);\n                reject();\n            }\n        });\n    };\n    return Editor;\n}());\nexports.Editor = Editor;\n//# sourceMappingURL=Editor.js.map","\"use strict\";\n/**\n * @author  Ikaros Kappler\n * @date    2023-07-25\n * @version 1.0.0\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPGDialogueLogic = void 0;\nvar axios_1 = __importDefault(require(\"axios\"));\nvar RPGDialogueLogic = /** @class */ (function () {\n    function RPGDialogueLogic(dialogueStruct, validateStructure) {\n        // this.name = \"RPGDialogue\";\n        this.structure = dialogueStruct;\n        this.listeners = [];\n        this.resetToBeginning();\n        if (validateStructure) {\n            this.validate();\n        }\n    }\n    RPGDialogueLogic.prototype.addDialogueChangeListener = function (listener) {\n        for (var i = 0; i < this.listeners.length; i++) {\n            if (this.listeners[i] === listener) {\n                return false;\n            }\n        }\n        this.listeners.push(listener);\n        return true;\n    };\n    RPGDialogueLogic.prototype.removeDialogueChangeListener = function (listener) {\n        for (var i = 0; i < this.listeners.length; i++) {\n            if (this.listeners[i] === listener) {\n                this.listeners.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    RPGDialogueLogic.prototype.fireStateChange = function (nextNodeName, oldNodeName, selectedOptionIndex) {\n        for (var i = 0; i < this.listeners.length; i++) {\n            this.listeners[i](this.structure, nextNodeName, oldNodeName, selectedOptionIndex);\n        }\n    };\n    RPGDialogueLogic.prototype.getCurrentNpcName = function () {\n        var _a, _b, _c;\n        var npcIndex = (_a = this.currentQuestionaire.npcIndex) !== null && _a !== void 0 ? _a : 0;\n        var npcName = ((_c = (_b = this.structure.meta) === null || _b === void 0 ? void 0 : _b.npcs) === null || _c === void 0 ? void 0 : _c.length) > 0 ? this.structure.meta.npcs[npcIndex].name : null;\n        return npcName;\n    };\n    RPGDialogueLogic.prototype.loadCurrentQuestionaire = function (setQuestionText, addOptionNode) {\n        if (this.currentQuestionaire) {\n            var npcName = this.getCurrentNpcName();\n            setQuestionText(this.currentQuestionaire.q, npcName);\n            for (var i = 0; i < this.currentQuestionaire.o.length; i++) {\n                addOptionNode(this.currentQuestionaire.o[i].a, i);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Get the current mini questionaire or null if no current or next questionaire is available.\n     * @returns\n     */\n    RPGDialogueLogic.prototype.getCurrentQuestionaire = function () {\n        return this.currentQuestionaire;\n    };\n    /**\n     * Check if the end was reached or if there are more questions available\n     * @returns {boolean} false if there is a current question active.\n     */\n    RPGDialogueLogic.prototype.isEndReached = function () {\n        return this.currentQuestionaire === null || this.currentQuestionaire === undefined;\n    };\n    /**\n     * Give an answer to the current questionaire. Only valid answer indices will be acceped.\n     * @param {number} index\n     * @returns {boolean} true if the the index is valid.\n     */\n    RPGDialogueLogic.prototype.sendAnswer = function (index) {\n        if (index < 0 || index >= this.currentQuestionaire.o.length) {\n            return false;\n        }\n        var oldQuestionaireName = this.currentQuestionaireName;\n        var selectedAnswer = this.currentQuestionaire.o[index];\n        if (!selectedAnswer) {\n            return false;\n        }\n        if (!selectedAnswer.next) {\n            this.currentQuestionaireName = null;\n            this.currentQuestionaire = null;\n        }\n        else {\n            this.currentQuestionaireName = selectedAnswer.next;\n            var nextQuestionaire = this.structure.graph[this.currentQuestionaireName];\n            // Can be the final one!\n            if (!nextQuestionaire.o || nextQuestionaire.o.length === 0) {\n                this.currentQuestionaireName = null;\n                this.currentQuestionaire = null;\n            }\n            else {\n                this.currentQuestionaire = nextQuestionaire;\n            }\n        }\n        this.fireStateChange(this.currentQuestionaireName, oldQuestionaireName, index);\n        console.log(\"Next questionaire\", this.currentQuestionaire);\n        return true;\n    };\n    /**\n     * Find the initial mini questionaire.\n     */\n    RPGDialogueLogic.prototype.resetToBeginning = function (alternateStartNodeName) {\n        this.currentQuestionaireName = alternateStartNodeName !== null && alternateStartNodeName !== void 0 ? alternateStartNodeName : \"intro\";\n        this.currentQuestionaire = this.structure.graph[this.currentQuestionaireName];\n        if (!this.currentQuestionaire) {\n            throw \"Cannot initialize RPGDialogueLogic: structure does not have an 'intro' entry\";\n        }\n    };\n    /**\n     * Check if the current dialogue is still valid or reached its end.\n     */\n    RPGDialogueLogic.prototype.validate = function () {\n        // ...\n    };\n    RPGDialogueLogic.prototype.getHTMLElement = function (nodeId) {\n        return typeof nodeId === \"string\" ? document.getElementById(nodeId) : nodeId;\n    };\n    /**\n     * This is a convenient function for quickly integrating the dialogue logic into\n     * an existing HTML document with prepared two <div> elements for displaying\n     * the question and possible answers.\n     *\n     * @param {string|HTMLElement} questionNodeId - The output container (or ID) for questions.\n     * @param {string|HTMLElement} optionsNodeId - The output container (or ID) for answer options.\n     * @param {string} alternateStartNodeName - If you don't want to start at 'intro' specify your start node name here.\n     * @returns\n     */\n    RPGDialogueLogic.prototype.beginConversation = function (questionNodeId, optionsNodeId, alternateStartNodeName) {\n        var questionNode = this.getHTMLElement(questionNodeId);\n        var optionsNode = this.getHTMLElement(optionsNodeId);\n        /**\n         * Set the text in the question node.\n         * @param {*} questionText\n         */\n        var setQuestionText = function (questionText, npcName) {\n            if (npcName) {\n                questionNode.innerHTML = \"<span class=\\\"rpg-npcname\\\">\".concat(npcName, \":</span> \").concat(questionText);\n            }\n            else {\n                questionNode.innerHTML = questionText;\n            }\n        };\n        /**\n         * Clear the options node. Just for upper level use here.\n         */\n        var clearOptionsNode = function () {\n            optionsNode.innerHTML = \"\";\n        };\n        /**\n         * Add a new option node with the given answer text and option index. Use\n         * the option index to send the answer.\n         *\n         * @param {*} answerText\n         * @param {*} optionIndex\n         */\n        var addOptionNode = function (answerText, optionIndex) {\n            var answerNode = document.createElement(\"li\");\n            var answerLinkNode = document.createElement(\"a\");\n            answerLinkNode.innerHTML = answerText;\n            answerLinkNode.setAttribute(\"href\", \"#\");\n            answerLinkNode.addEventListener(\"click\", function () {\n                sendAnswer(optionIndex);\n            });\n            answerNode.appendChild(answerLinkNode);\n            optionsNode.appendChild(answerNode);\n        };\n        var _self = this;\n        /**\n         * Send the selected answer (by index).\n         * @param {number} index\n         */\n        var sendAnswer = function (index) {\n            _self.sendAnswer(index);\n            if (_self.isEndReached()) {\n                setQuestionText(\"---END OF CONVERSATION---\", undefined);\n                clearOptionsNode();\n            }\n            clearOptionsNode();\n            _self.loadCurrentQuestionaire(setQuestionText, addOptionNode);\n        };\n        // Initialize the first question.\n        _self.resetToBeginning(alternateStartNodeName);\n        _self.loadCurrentQuestionaire(setQuestionText, addOptionNode);\n        _self.fireStateChange(this.currentQuestionaireName, null, -1);\n    };\n    /**\n     * Load the dialogue structure from the JSON document at the given path.\n     *\n     * @param {string} path\n     * @returns {Promise<RPGDialogueLogic>}\n     */\n    RPGDialogueLogic.loadConfigFromJSON = function (path) {\n        console.log(\"axios\", axios_1.default);\n        return new Promise(function (accept, reject) {\n            axios_1.default\n                .get(path)\n                .then(function (response) {\n                // handle success\n                console.log(response);\n                // Validate response data?\n                accept(response.data);\n            })\n                .catch(function (error) {\n                // handle error\n                console.log(error);\n                reject();\n            })\n                .finally(function () {\n                // always executed\n            });\n        });\n    };\n    /**\n     * Load the dialogue structure from the JSON document at the given path.\n     *\n     * @param {string} path\n     * @returns {Promise<RPGDialogueLogic>}\n     */\n    RPGDialogueLogic.loadFromJSON = function (path) {\n        return new Promise(function (accept, reject) {\n            RPGDialogueLogic.loadConfigFromJSON(path).then(function (struct) {\n                accept(new RPGDialogueLogic(struct, true));\n            });\n        });\n    };\n    return RPGDialogueLogic;\n}());\nexports.RPGDialogueLogic = RPGDialogueLogic;\n//# sourceMappingURL=RPGDialogueLogic.js.map","\"use strict\";\n/**\n * A wrapper class for AlloyFinger.\n *\n * @author  Ikaros Kappler\n * @date    2023-07-31\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TouchEnterLeaveHandler = exports.TouchHandler = void 0;\nvar plotboilerplate_1 = require(\"plotboilerplate\");\nvar TouchHandler = /** @class */ (function () {\n    function TouchHandler(pb, dialogConfigWithPositions, editorHelper) {\n        this.wasTouchUsed = false;\n        var _self = this;\n        // Install a touch handler on the canvas.\n        var relPos = function (pos) {\n            var bounds = pb.canvas.getBoundingClientRect();\n            return { x: pos.x - bounds.left, y: pos.y - bounds.top };\n        };\n        var draggedNodeName = null;\n        var draggedNode = null;\n        var draggedOption;\n        var wasDragged = false;\n        var touchMovePos = null;\n        var touchDownPos = null;\n        var clearTouch = function () {\n            touchMovePos = null;\n            touchDownPos = null;\n            draggedNodeName = null;\n        };\n        var afProps = {\n            touchStart: function (evt) {\n                console.log(\"Touchstart\");\n                _self.wasTouchUsed = true;\n                if (evt.touches.length == 1) {\n                    touchMovePos = new plotboilerplate_1.Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                    touchDownPos = new plotboilerplate_1.Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                    draggedNodeName = editorHelper.locateNodeBoxNameAtPos(pb.transformMousePosition(touchMovePos.x, touchMovePos.y));\n                    if (draggedNodeName) {\n                        draggedNode = dialogConfigWithPositions.graph[draggedNodeName];\n                    }\n                    else {\n                        draggedOption = editorHelper.locateOptionBoxNameAtPos(pb.transformMousePosition(touchMovePos.x, touchMovePos.y));\n                    }\n                    wasDragged = false;\n                }\n            },\n            touchMove: function (evt) {\n                console.log(\"touchMove\");\n                _self.wasTouchUsed = true;\n                if (evt.touches.length == 1 && draggedNode) {\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    if (!touchDownPos || !touchMovePos) {\n                        return;\n                    }\n                    var rel = relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                    var trans = pb.transformMousePosition(rel.x, rel.y);\n                    var diff = new plotboilerplate_1.Vertex(pb.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                    draggedNode.editor.position.x += diff.x;\n                    draggedNode.editor.position.y += diff.y;\n                    touchMovePos = new plotboilerplate_1.Vertex(relPos({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                    wasDragged = true;\n                    pb.redraw();\n                }\n            },\n            touchEnd: function (evt) {\n                console.log(\"touchEnd\");\n                _self.wasTouchUsed = true;\n                // Note: e.touches.length is 0 here\n                if (draggedNode) {\n                    if (!touchDownPos) {\n                        return;\n                    }\n                    if (!wasDragged) {\n                        wasDragged = false;\n                        if (draggedNode) {\n                            if (editorHelper.selectedOption) {\n                                // reconnect\n                                editorHelper.handleOptionReconnect(draggedNodeName);\n                            }\n                            else {\n                                editorHelper.setSelectedOption(null, false);\n                                editorHelper.setSelectedNode(draggedNodeName, draggedNode);\n                            }\n                        }\n                        else {\n                            // Option can be null, too.\n                            editorHelper.setSelectedOption(draggedOption, true);\n                            editorHelper.setSelectedNode(null, null);\n                        }\n                    }\n                }\n                clearTouch();\n            },\n            touchCancel: function (evt) {\n                console.log(\"touchCancel\");\n                _self.wasTouchUsed = true;\n                clearTouch();\n            }\n        }; // END afProps\n        /* tslint:disable-next-line */\n        _self.alloyFinger = globalThis.createAlloyFinger(pb.eventCatcher ? pb.eventCatcher : pb.canvas, afProps);\n    }\n    TouchHandler.prototype.destroy = function () {\n        this.alloyFinger.destroy();\n    };\n    return TouchHandler;\n}());\nexports.TouchHandler = TouchHandler;\nvar TouchEnterLeaveHandler = /** @class */ (function () {\n    function TouchEnterLeaveHandler() {\n        this.onTouchLeaveEvents = [];\n        this.onTouchEnterEvents = [];\n        this._init();\n    }\n    TouchEnterLeaveHandler.prototype.onTouchEnter = function (selector, fn) {\n        var _this = this;\n        this.onTouchEnterEvents.push([selector, fn]);\n        return function () {\n            _this.onTouchEnterEvents.slice().map(function (e, i) {\n                if (e[0] === selector && e[1] === fn) {\n                    this.onTouchEnterEvents.splice(1, i);\n                }\n            });\n        };\n    };\n    TouchEnterLeaveHandler.prototype.onTouchLeave = function (selector, fn) {\n        this.onTouchLeaveEvents.push([selector, fn]);\n        return function () {\n            this.onTouchLeaveEvents.slice().map(function (e, i) {\n                if (e[0] === selector && e[1] === fn) {\n                    this.onTouchLeaveEvents.splice(1, i);\n                }\n            });\n        };\n    };\n    TouchEnterLeaveHandler.prototype._init = function () {\n        var lastTouchLeave;\n        var lastTouchEnter;\n        var _self = this;\n        document.addEventListener(\"touchmove\", function (e) {\n            var el = document.elementFromPoint(e.touches[0].clientX, e.touches[0].clientY);\n            if (!el) {\n                return;\n            }\n            _self.onTouchLeaveEvents.map(function (event) {\n                if (el != lastTouchEnter && lastTouchEnter && lastTouchEnter.matches(event[0])) {\n                    if (lastTouchEnter !== lastTouchLeave) {\n                        event[1](lastTouchEnter, e);\n                        lastTouchLeave = lastTouchEnter;\n                        lastTouchEnter = null;\n                    }\n                }\n            });\n            _self.onTouchEnterEvents.map(function (event) {\n                if (el.matches(event[0]) && el !== lastTouchEnter) {\n                    lastTouchEnter = el;\n                    lastTouchLeave = null;\n                    event[1](el, e);\n                }\n            });\n        });\n    };\n    return TouchEnterLeaveHandler;\n}());\nexports.TouchEnterLeaveHandler = TouchEnterLeaveHandler;\n// Test\n// onTouchEnter('.area',function(el,e){\n//   el.classList.add('hover')\n// })\n// onTouchLeave('.area',function(el,e){\n//   el.classList.remove('hover')\n// })\n//# sourceMappingURL=TouchHandler.js.map","\"use strict\";\n/**\n * @author  Ikaros Kappler\n * @date    2021-11-07\n * @version 1.0.0\n *\n * @param {Record<string,string>} GUP\n * @returns {boolean}\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.detectDarkMode = void 0;\nvar detectDarkMode = function (GUP) {\n    // Respect overrides\n    if (typeof GUP !== \"undefined\" && GUP.hasOwnProperty(\"darkmode\") && GUP[\"darkmode\"]) {\n        var overrideValue = GUP[\"darkmode\"];\n        if (overrideValue === \"0\" || overrideValue.toLowerCase() === \"false\") {\n            return false;\n        }\n        else if (overrideValue === \"1\" || overrideValue.toLowerCase() === \"true\") {\n            return true;\n        }\n    }\n    var hours = new Date().getHours();\n    var isDayTime = hours > 6 && hours < 18;\n    return !isDayTime;\n};\nexports.detectDarkMode = detectDarkMode;\n//# sourceMappingURL=detectDarkMode.js.map","\"use strict\";\n/**\n * A script for demonstrating the line-point-distance.\n *\n * @require PlotBoilerplate, MouseHandler, gup, dat.gui\n *\n * @author   Ikaros Kappler\n * @date     2023-08-01\n * @version  1.0.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPGDOMHelpers = void 0;\nvar TouchHandler_1 = require(\"./TouchHandler\");\nvar editorHelpers_1 = require(\"./editorHelpers\");\nvar modal_1 = require(\"./modal\");\nvar RPGDOMHelpers = /** @class */ (function () {\n    function RPGDOMHelpers(editorHelpers) {\n        this.currentDraggedAnswerIndex = -1;\n        this.currentDropAnswerIndex = -1;\n        this.editorHelpers = editorHelpers;\n        this.touchEnterLeaveHandler = new TouchHandler_1.TouchEnterLeaveHandler();\n        this.editorElement = document.getElementById(\"attribute-editor\");\n        this.optionsElement = document.getElementById(\"e-options-container\");\n        this.keyElement = this.editorElement.querySelector(\"input#e-key\");\n        this.npcElement = this.editorElement.querySelector(\"select#e-npc-index\");\n        this.qElement = this.editorElement.querySelector(\"textarea#e-q\");\n        this.qElement.addEventListener(\"change\", this.handleQChanged(this));\n        this.npcElement.addEventListener(\"change\", this.handleNPCIndexChanged(this));\n        this.keyElement.addEventListener(\"change\", this.handleKeyChanged(this));\n        this.modal = new modal_1.Modal();\n        document.getElementById(\"b-export-json\").addEventListener(\"click\", this.exportJSON(this));\n        document.getElementById(\"b-add-answer-option\").addEventListener(\"click\", this.addAnswerOption(this));\n        document.getElementById(\"b-add-dialogue-node\").addEventListener(\"click\", this.addDialogueNode(this));\n        document.getElementById(\"b-delete-dialogue-node\").addEventListener(\"click\", this.requestRemoveDialogueNode(this));\n    }\n    RPGDOMHelpers.prototype.isExportWithoutPositions = function () {\n        var checkbox = document.getElementById(\"cb-export-without-positions\");\n        return checkbox.checked;\n    };\n    RPGDOMHelpers.prototype.isAutoSave = function () {\n        var checkbox = document.getElementById(\"cb-use-localstorage\");\n        return checkbox.checked;\n    };\n    RPGDOMHelpers.prototype.exportJSON = function (_self) {\n        return function () {\n            var removePositions = _self.isExportWithoutPositions();\n            var dConfig = removePositions\n                ? editorHelpers_1.EditorHelper.removePositions(_self.editorHelpers.dialogConfigWithPositions)\n                : _self.editorHelpers.dialogConfigWithPositions;\n            var jsonString = JSON.stringify(dConfig);\n            var blob = new Blob([jsonString], { type: \"application/json\" });\n            var url = URL.createObjectURL(blob);\n            var a = document.createElement(\"a\");\n            a.href = url;\n            a.download = \"dialog-config.json\";\n            a.textContent = \"Download backup.json\";\n            a.click();\n        };\n    };\n    RPGDOMHelpers.prototype.addAnswerOption = function (_self) {\n        return function () {\n            var newOption = {\n                a: \"\",\n                next: null\n            };\n            _self.currentGraphNode.o.push(newOption);\n            _self.updateAnswerOptions();\n            _self.editorHelpers.pb.redraw();\n        };\n    };\n    RPGDOMHelpers.prototype.addDialogueNode = function (_self) {\n        return function () {\n            _self.editorHelpers.addNewDialogueNode();\n        };\n    };\n    RPGDOMHelpers.prototype.requestRemoveDialogueNode = function (_self) {\n        return function () {\n            _self.modal.setTitle(\"Delete option?\");\n            _self.modal.setBody(\"Do you really want to delete the current dialoge node '\".concat(_self.currentNodeName, \"'?\"));\n            _self.modal.setFooter(\"\");\n            _self.modal.setActions([\n                modal_1.Modal.ACTION_CANCEL,\n                {\n                    label: \"Yes\",\n                    action: function () {\n                        _self.modal.close();\n                        _self.removeDialogueNode();\n                    }\n                }\n            ]);\n            _self.modal.open();\n        };\n    };\n    RPGDOMHelpers.prototype.removeDialogueNode = function () {\n        this.editorHelpers.removeNewDialogueNode(this.currentNodeName);\n        this.toggleVisibility(false);\n    };\n    RPGDOMHelpers.prototype.toggleVisibility = function (isVisible) {\n        if (isVisible) {\n            this.editorElement.classList.remove(\"d-none\");\n        }\n        else {\n            this.editorElement.classList.add(\"d-none\");\n        }\n    };\n    RPGDOMHelpers.prototype.handleQChanged = function (_self) {\n        return function (changeEvent) {\n            _self.currentGraphNode.q = changeEvent.target.value;\n            _self.editorHelpers.pb.redraw();\n        };\n    };\n    RPGDOMHelpers.prototype.handleNPCIndexChanged = function (_self) {\n        var _this = this;\n        return function (_changeEvent) {\n            var newIndex = parseInt(_this.npcElement.value);\n            if (Number.isNaN(newIndex)) {\n                newIndex = -1;\n            }\n            _self.currentGraphNode.npcIndex = newIndex;\n        };\n    };\n    RPGDOMHelpers.prototype.handleKeyChanged = function (_self) {\n        var _this = this;\n        return function (_changeEvent) {\n            var newName = _this.keyElement.value;\n            if (!newName || (newName = newName.trim()).length === 0) {\n                return;\n            }\n            var renameSuccessful = _self.editorHelpers.renameGraphNode(_self.currentNodeName, newName);\n            if (renameSuccessful) {\n                _self.currentNodeName = newName;\n            }\n        };\n    };\n    RPGDOMHelpers.prototype.handleATextChanged = function (_self, answer) {\n        return function (changeEvent) {\n            answer.a = changeEvent.target.value;\n            _self.editorHelpers.pb.redraw();\n        };\n    };\n    RPGDOMHelpers.prototype.handleASuccessorChanged = function (_self, answer) {\n        return function (changeEvent) {\n            answer.next = changeEvent.target.value;\n            _self.editorHelpers.pb.redraw();\n        };\n    };\n    RPGDOMHelpers.prototype.updateAnswerOptions = function () {\n        this.showAnswerOptions(this.currentNodeName, this.currentGraphNode);\n    };\n    RPGDOMHelpers.prototype.getSelectedNpcIndex = function () {\n        return typeof this.currentGraphNode.npcIndex === \"undefined\" || Number.isNaN(this.currentGraphNode.npcIndex)\n            ? 0\n            : this.currentGraphNode.npcIndex;\n    };\n    RPGDOMHelpers.prototype.updateNpcSelector = function () {\n        if (!this.currentGraphNode) {\n            return;\n        }\n        this.npcElement.innerHTML = \"\";\n        var curNpcIndex = this.getSelectedNpcIndex();\n        // console.log(\"this.currentGraphNode.npcIndex\", this.currentGraphNode.npcIndex, \"curNpcIndex\", curNpcIndex);\n        for (var i = 0; i < this.editorHelpers.dialogConfigWithPositions.meta.npcs.length; i++) {\n            var npcOption = document.createElement(\"option\");\n            npcOption.setAttribute(\"value\", \"\".concat(i));\n            if (i === 0) {\n                npcOption.innerHTML = \"\".concat(this.editorHelpers.dialogConfigWithPositions.meta.npcs[i].name, \" (default)\");\n            }\n            else {\n                npcOption.innerHTML = this.editorHelpers.dialogConfigWithPositions.meta.npcs[i].name;\n            }\n            if (i === curNpcIndex) {\n                npcOption.setAttribute(\"selected\", \"true\");\n                npcOption.selected = true;\n            }\n            this.npcElement.appendChild(npcOption);\n        }\n        this.npcElement.value = \"\".concat(curNpcIndex);\n        this.npcElement.setAttribute(\"value\", \"\".concat(curNpcIndex));\n    };\n    RPGDOMHelpers.prototype.toggleDragEnterStyles = function (target) {\n        // console.log(\"toggleDragEnterStyles\");\n        var answerIndex = this.currentDraggedAnswerIndex;\n        var dropIndex = parseInt(target.getAttribute(\"data-dropindex\"));\n        if (target.classList.contains(\"droppable\") && answerIndex !== dropIndex && answerIndex + 1 !== dropIndex) {\n            target.classList.add(\"dragover\");\n        }\n    };\n    RPGDOMHelpers.prototype.toggleDragLeaveStyles = function (target) {\n        console.log(\"toggleDragLeaveStyles\");\n        if (target.classList.contains(\"droppable\")) {\n            target.classList.remove(\"dragover\");\n        }\n    };\n    RPGDOMHelpers.prototype.showAnswerOptions = function (nodeName, graphNode) {\n        var _self = this;\n        this.currentNodeName = nodeName;\n        this.currentGraphNode = graphNode;\n        this.keyElement.setAttribute(\"value\", nodeName ? nodeName : \"\");\n        this.keyElement.value = nodeName ? nodeName : \"\";\n        // console.log(\"showAnswerOptions\", this.currentGraphNode);\n        this.updateNpcSelector();\n        this.optionsElement.innerHTML = \"\";\n        this.npcElement.value = !graphNode || Number.isNaN(graphNode.npcIndex) ? \"0\" : \"\".concat(graphNode.npcIndex);\n        this.qElement.setAttribute(\"value\", graphNode ? graphNode.q : \"\");\n        this.qElement.value = graphNode ? graphNode.q : \"\";\n        if (!graphNode) {\n            return;\n        }\n        var onDragOver = function (ev) {\n            console.log(\"ondragover\", ev.target);\n            ev.preventDefault();\n            var target = ev.target;\n            _self.toggleDragEnterStyles(target);\n        };\n        var onDragLeave = function (ev) {\n            console.log(\"ondragleave\", ev.target);\n            ev.preventDefault();\n            var target = ev.target;\n            _self.toggleDragLeaveStyles(target);\n        };\n        /**\n         * Native browser DnD does not support touch events.\n         * So we need a workaround using our custom TouchEnterLeaverHandler here.\n         */\n        _self.touchEnterLeaveHandler.onTouchEnter(\".a-droparea\", function (element) {\n            console.log(\"onTouchEnter\", element);\n            if (!element.classList.contains(\"a-droparea\")) {\n                return;\n            }\n            _self.currentDropAnswerIndex = parseInt(element.getAttribute(\"data-dropIndex\"));\n            _self.toggleDragEnterStyles(element);\n        });\n        _self.touchEnterLeaveHandler.onTouchLeave(\".a-droparea\", function (element) {\n            console.log(\"onTouchLeave\", element);\n            _self.currentDropAnswerIndex = -1;\n            _self.toggleDragLeaveStyles(element);\n        });\n        var drop = function (ev) {\n            console.log(\"Drop\", ev);\n            ev.preventDefault();\n            var target = ev.target;\n            // const answerIndex = parseInt(ev.dataTransfer.getData(\"answerindex\"));\n            var answerIndex = _self.currentDraggedAnswerIndex;\n            var dropIndex = parseInt(target.getAttribute(\"data-dropindex\"));\n            console.log(\"Move\", answerIndex, \"to\", dropIndex);\n            // target.appendChild(document.getElementById(data));\n            if (!target.classList.contains(\"droppable\") || answerIndex === dropIndex || answerIndex + 1 === dropIndex) {\n                // No real change\n                return;\n            }\n            _self.performDrop(answerIndex, dropIndex);\n        };\n        var isTouchDevice = this.editorHelpers.editor.currentTouchHandler.wasTouchUsed;\n        var dropArea = this.makeADropArea(0, drop, onDragOver, onDragLeave);\n        this.optionsElement.appendChild(dropArea);\n        for (var i = 0; i < graphNode.o.length; i++) {\n            var option = graphNode.o[i];\n            var answerWrapperElement = document.createElement(\"div\");\n            var answerControlsElement = this.makeAnswerControlElement(i, isTouchDevice);\n            var answerElement = document.createElement(\"div\");\n            var labelElement = document.createElement(\"div\");\n            var textElement = document.createElement(\"textarea\");\n            var selectElement = this.createNodeSelectElement(nodeName, option.next);\n            labelElement.innerHTML = \"A#\".concat(i);\n            labelElement.classList.add(\"e-label\");\n            textElement.innerHTML = option.a;\n            answerElement.appendChild(labelElement);\n            answerElement.appendChild(textElement);\n            answerElement.appendChild(selectElement);\n            var handleDragStart = function (ev) {\n                // console.log(\"handleDragStart\");\n                _self.currentDraggedAnswerIndex = parseInt(ev.target.getAttribute(\"data-answerindex\"));\n                // console.log(\"handleDragStart\", _self.currentDraggedAnswerIndex);\n                ev.dataTransfer.setData(\"answerindex\", \"\".concat(_self.currentDraggedAnswerIndex));\n            };\n            var handleTouchDragStart = function (ev) {\n                ev.preventDefault(); // Is this required?\n                var dragStartElement = ev.target;\n                _self.currentDraggedAnswerIndex = parseInt(dragStartElement.getAttribute(\"data-answerindex\"));\n                if (Number.isNaN(_self.currentDraggedAnswerIndex)) {\n                    // touchStart on touch devices is a bit different than dragStart on Desktop devives.\n                    // Try to find enclosing draggable element\n                    if (dragStartElement.classList.contains(\"a-dnd-element\")) {\n                        dragStartElement = dragStartElement.parentElement.parentElement;\n                    }\n                    // This should not be a node of class 'answer-wrapper-element' and draggable=true\n                    if (!dragStartElement.classList.contains(\"answer-wrapper-element\") || !dragStartElement.getAttribute(\"draggable\")) {\n                        console.log(\"Cannot find draggable element.\");\n                        return;\n                    }\n                    _self.currentDraggedAnswerIndex = parseInt(dragStartElement.getAttribute(\"data-answerindex\"));\n                }\n                // console.log(\"handleTouchDragStart\", _self.currentDraggedAnswerIndex);\n            };\n            var handleTouchDragEnd = function (_ev) {\n                _self.performDrop(_self.currentDraggedAnswerIndex, _self.currentDropAnswerIndex);\n            };\n            answerWrapperElement.classList.add(\"answer-wrapper-element\");\n            // answerWrapperElement.setAttribute(\"data-answerindex\", `${i}`);\n            if (isTouchDevice) {\n                // Regular 'mouse' or Desktop device.\n                // No additional listeners to install.\n            }\n            else {\n                // The TouchHandler already received an only-touch event, so we are\n                // probably currently running on a touch device\n                if (answerControlsElement.dndHandleElement) {\n                    answerControlsElement.dndHandleElement.setAttribute(\"draggable\", \"true\");\n                    answerControlsElement.dndHandleElement.addEventListener(\"dragstart\", handleDragStart);\n                    answerControlsElement.dndHandleElement.addEventListener(\"touchstart\", handleTouchDragStart);\n                    answerControlsElement.dndHandleElement.addEventListener(\"touchend\", handleTouchDragEnd);\n                    answerControlsElement.dndHandleElement.setAttribute(\"data-answerindex\", \"\".concat(i));\n                }\n            }\n            answerWrapperElement.appendChild(answerElement);\n            answerWrapperElement.appendChild(answerControlsElement.container);\n            var dropArea_1 = this.makeADropArea(i + 1, drop, onDragOver, onDragLeave);\n            this.optionsElement.appendChild(answerWrapperElement);\n            this.optionsElement.appendChild(dropArea_1);\n            textElement.addEventListener(\"change\", this.handleATextChanged(this, option));\n            selectElement.addEventListener(\"change\", this.handleASuccessorChanged(this, option));\n        }\n    };\n    /**\n     * Create a new answer element (consisting of labels, input fields and buttons).\n     * If `isTouchDevice` is true, then a drag element will be added.\n     * Otherwise two up/down-buttons will be added.\n     *\n     * @param {number} index - The answer option index inside the config.\n     * @param {boolean} isTouchDevice - Set to `true` if drag-and-drop handles should be added instead of buttons.\n     * @returns {HTMLDivElement}\n     */\n    RPGDOMHelpers.prototype.makeAnswerControlElement = function (index, isTouchDevice) {\n        var _self = this;\n        var controlElement = document.createElement(\"div\");\n        controlElement.classList.add(\"answer-controls-element\");\n        var dndElement = null;\n        if (isTouchDevice) {\n            var upDownElement = document.createElement(\"div\");\n            upDownElement.classList.add(\"answer-up-down-element\");\n            var upBtn = document.createElement(\"button\");\n            upBtn.innerHTML = \"▴\";\n            if (index === 0) {\n                upBtn.setAttribute(\"disabled\", \"true\");\n            }\n            else {\n                upBtn.addEventListener(\"click\", function () {\n                    console.log(\"upBtn\", index, index - 1);\n                    _self.performDrop(index, index - 1);\n                });\n            }\n            var downBtn = document.createElement(\"button\");\n            downBtn.innerHTML = \"▾\";\n            if (index + 1 === this.currentGraphNode.o.length) {\n                downBtn.setAttribute(\"disabled\", \"true\");\n            }\n            else {\n                downBtn.addEventListener(\"click\", function () {\n                    console.log(\"downBtn\", index, index + 2); // Think of drop zone indices here\n                    _self.performDrop(index, index + 2); // Think of drop zone indices here\n                });\n            }\n            upDownElement.appendChild(upBtn);\n            upDownElement.appendChild(downBtn);\n            controlElement.appendChild(upDownElement);\n        }\n        else {\n            dndElement = document.createElement(\"div\");\n            dndElement.classList.add(\"a-dnd-element\");\n            dndElement.innerHTML = \"&vellip;\";\n            controlElement.appendChild(dndElement);\n        }\n        var deleteButton = document.createElement(\"button\");\n        deleteButton.classList.add(\"a-delete-button\");\n        deleteButton.addEventListener(\"click\", this.requestDeleteOption(index));\n        deleteButton.innerHTML = \"&#x1F5D1;\";\n        controlElement.appendChild(deleteButton);\n        return { container: controlElement, dndHandleElement: dndElement };\n    };\n    RPGDOMHelpers.prototype.performDrop = function (answerIndex, dropIndex) {\n        if (dropIndex > answerIndex) {\n            dropIndex--;\n        }\n        var old = this.currentGraphNode.o[answerIndex];\n        this.currentGraphNode.o[answerIndex] = this.currentGraphNode.o[dropIndex];\n        this.currentGraphNode.o[dropIndex] = old;\n        // Re-build the list : )\n        this.updateAnswerOptions();\n        this.editorHelpers.pb.redraw();\n    };\n    RPGDOMHelpers.prototype.requestDeleteOption = function (index) {\n        var _self = this;\n        return function () {\n            _self.modal.setTitle(\"Delete option?\");\n            _self.modal.setBody(\"Do you really want to delete option #\".concat(index, \"?\"));\n            _self.modal.setFooter(\"\");\n            _self.modal.setActions([\n                modal_1.Modal.ACTION_CANCEL,\n                {\n                    label: \"Yes\",\n                    action: function () {\n                        _self.modal.close();\n                        _self.handleDeleteOption(index);\n                    }\n                }\n            ]);\n            _self.modal.open();\n        };\n    };\n    RPGDOMHelpers.prototype.handleDeleteOption = function (index) {\n        this.currentGraphNode.o.splice(index, 1);\n        this.updateAnswerOptions();\n        this.editorHelpers.pb.redraw();\n    };\n    RPGDOMHelpers.prototype.makeADropArea = function (dropIndex, drop, onDragOver, onDragLeave) {\n        var dropArea = document.createElement(\"div\");\n        dropArea.setAttribute(\"data-dropindex\", \"\".concat(dropIndex));\n        dropArea.classList.add(\"a-droparea\", \"droppable\");\n        dropArea.addEventListener(\"drop\", drop);\n        dropArea.addEventListener(\"dragover\", onDragOver);\n        dropArea.addEventListener(\"dragleave\", onDragLeave);\n        return dropArea;\n    };\n    RPGDOMHelpers.prototype.createNodeSelectElement = function (currentKey, selectedKey) {\n        var selectElement = document.createElement(\"select\");\n        if (!this.editorHelpers.dialogConfigWithPositions) {\n            console.warn(\"Warning: cannout populate nodeSelectElement. No dialogConfig set.\");\n        }\n        else {\n            var optionElement = this.createNodeSelectOptionElement(\"\", false, null, false);\n            selectElement.appendChild(optionElement);\n            for (var key in this.editorHelpers.dialogConfigWithPositions.graph) {\n                if (!this.editorHelpers.dialogConfigWithPositions.graph.hasOwnProperty(key)) {\n                    return;\n                }\n                var questionaire = this.editorHelpers.dialogConfigWithPositions.graph[key];\n                var optionElement_1 = this.createNodeSelectOptionElement(questionaire.q, key === currentKey, key, key === selectedKey);\n                selectElement.appendChild(optionElement_1);\n            }\n        }\n        return selectElement;\n    };\n    RPGDOMHelpers.prototype.createNodeSelectOptionElement = function (questionaireText, isCurrent, key, isSelected) {\n        var optionElement = document.createElement(\"option\");\n        optionElement.setAttribute(\"value\", key);\n        optionElement.innerHTML = \"\".concat(key !== null && key !== void 0 ? key : \"\", \": \").concat(editorHelpers_1.EditorHelper.ellipsify(questionaireText, 20));\n        if (isCurrent) {\n            optionElement.setAttribute(\"disabled\", \"true\");\n        }\n        if (isSelected) {\n            optionElement.setAttribute(\"selected\", \"true\");\n        }\n        return optionElement;\n    };\n    return RPGDOMHelpers;\n}());\nexports.RPGDOMHelpers = RPGDOMHelpers;\n//# sourceMappingURL=domHelpers.js.map","\"use strict\";\n/**\n * Helpers for the graph editor.\n *\n * @require PlotBoilerplate\n *\n * @author   Ikaros Kappler\n * @date     2023-07-28\n * @version  1.0.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EditorHelper = void 0;\nvar plotboilerplate_1 = require(\"plotboilerplate\");\nvar domHelpers_1 = require(\"./domHelpers\");\nvar editorRenderer_1 = require(\"./editorRenderer\");\nvar metaHelpers_1 = require(\"./metaHelpers\");\nvar EditorHelper = /** @class */ (function () {\n    function EditorHelper(editor, pb, boxSize) {\n        // TODO: convert into node identifyer\n        /**\n         * The highlighted node's name or null if none is highlighted.\n         * Used to highlight nodes when the mouse is over.\n         */\n        this.highlightedNodeName = null;\n        /**\n         * The highlighted node itself or null if none is highligted.\n         * Used to determine rendering colors.\n         */\n        this.highlightedNode = null;\n        /**\n         * The selected node's name or null if none is selected.\n         * Used to determine the node editor's contents.\n         */\n        this.selectedNodeName = null;\n        /**\n         * The selected node itself or null if none is selected.\n         * Used to determine the node editor's contents.\n         */\n        this.selectedNode = null;\n        /**\n         * The currently selected option or null if none is selected.\n         * Used to re-connect an option with a new successor node.\n         */\n        this.selectedOption = null;\n        /**\n         * The currently highlighted option.\n         * Used to draw on-mouse-over options with a different color.\n         */\n        this.hightlightedOption = null;\n        /**\n         * The current mouse position (or null if mouse is not on canvas).\n         * In local relative coordinate system.\n         */\n        this.relativeMousePosition = null;\n        this.editor = editor;\n        this.pb = pb;\n        this.boxSize = boxSize;\n        this.selectedNodeName = null;\n        this.domHelper = new domHelpers_1.RPGDOMHelpers(this);\n        this.metaHelpers = new metaHelpers_1.DialogueMetaHelpers(this);\n    }\n    EditorHelper.prototype.setDialogConfig = function (dialogConfigWithPositions) {\n        this.dialogConfigWithPositions = dialogConfigWithPositions;\n    };\n    EditorHelper.prototype.setSelectedOption = function (selectedOption, noRedraw) {\n        console.log(\"Set selected option\", selectedOption);\n        this.selectedOption = selectedOption;\n        if (!noRedraw) {\n            this.pb.redraw();\n        }\n    };\n    EditorHelper.prototype.setHighlightedOption = function (hightlightedOption) {\n        // const isRedrawRequired = this.hightlightedOption !== hightlightedOption;\n        var isRedrawRequired = !this.isEqualOptionIdentifyer(this.hightlightedOption, hightlightedOption);\n        this.hightlightedOption = hightlightedOption;\n        if (isRedrawRequired) {\n            this.pb.redraw();\n        }\n    };\n    EditorHelper.prototype.setHighlightedNode = function (nodeName, noRedraw) {\n        this.highlightedNodeName = nodeName;\n        this.highlightedNode = nodeName ? this.dialogConfigWithPositions.graph[nodeName] : null;\n        if (!noRedraw) {\n            this.pb.redraw();\n        }\n    };\n    /**\n     * A helper function to create random safe positions in the viewport area.\n     * @param {PlotBoilerplate} pb\n     * @param {XYDimension} boxSize\n     * @returns\n     */\n    EditorHelper.prototype.getRandomPosition = function () {\n        var viewport = this.pb.viewport();\n        return {\n            x: viewport.min.x + this.boxSize.width + (viewport.width - 2 * this.boxSize.width) * Math.random(),\n            y: viewport.min.y + this.boxSize.height + (viewport.height - 2 * this.boxSize.height) * Math.random()\n        };\n    };\n    EditorHelper.prototype.setSelectedNode = function (nodeName, node) {\n        this.selectedNodeName = nodeName;\n        this.selectedNode = node;\n        if (nodeName && node) {\n            // this.domHelper.editorElement.classList.remove(\"d-none\");\n            this.domHelper.toggleVisibility(true);\n            this.domHelper.showAnswerOptions(nodeName, this.selectedNode);\n        }\n        else {\n            // this.domHelper.editorElement.classList.add(\"d-none\");\n            this.domHelper.toggleVisibility(false);\n            this.domHelper.showAnswerOptions(null, null);\n        }\n        this.pb.redraw();\n    };\n    /**\n     * A helper function to make sure all graph nodes have valid positions. Those without\n     * valid positions (eg like those being loaded from an incomplete JSON file) will be\n     * assigned to a random position inside the viewport.\n     *\n     * @param {PlotBoilerplate} pb\n     * @param {XYDimension} boxSize\n     * @returns\n     */\n    EditorHelper.prototype.enrichPositions = function (baseConfig) {\n        // Clone?\n        var configWithPositions = baseConfig;\n        for (var nodeName in configWithPositions.graph) {\n            var graphNode = configWithPositions.graph[nodeName];\n            if (!graphNode) {\n                console.warn(\"Warning: graph node \".concat(nodeName, \" is null or undefined!\"));\n                continue;\n            }\n            // Anonymous member check\n            if (!graphNode.hasOwnProperty(\"editor\")) {\n                graphNode.editor = { position: this.getRandomPosition() };\n            }\n            else if (!graphNode.editor.hasOwnProperty(\"position\")) {\n                graphNode.editor.position = this.getRandomPosition();\n            }\n            else {\n                if (!graphNode.editor.position.hasOwnProperty(\"x\") || isNaN(graphNode.editor.position.x)) {\n                    graphNode.editor.position.x = this.getRandomPosition().x;\n                }\n                if (!graphNode.editor.position.hasOwnProperty(\"y\") || isNaN(graphNode.editor.position.y)) {\n                    graphNode.editor.position.y = this.getRandomPosition().y;\n                }\n            }\n        }\n        return configWithPositions;\n    };\n    /**\n     * Check if the meta data is valid and – if not – add missing default fields.\n     * @param dialogueConfig\n     */\n    EditorHelper.prototype.enrichMetaData = function (dialogueConfig) {\n        var result = dialogueConfig;\n        if (!dialogueConfig.hasOwnProperty(\"meta\")) {\n            result.meta = { name: \"noname\", npcs: [] };\n        }\n        if (!result.meta.npcs) {\n            result.meta.npcs = [];\n        }\n        if (result.meta.npcs.length === 0) {\n            result.meta.npcs.push({ name: \"NPC #0\" });\n        }\n    };\n    EditorHelper.prototype.isPosInGraphNodeBox = function (pos, graphNode) {\n        return (graphNode.editor.position.x <= pos.x &&\n            graphNode.editor.position.y <= pos.y &&\n            graphNode.editor.position.x + this.boxSize.width > pos.x &&\n            graphNode.editor.position.y + this.boxSize.height > pos.y);\n    };\n    EditorHelper.prototype.isPosInOptionNodeBox = function (pos, graphNode, optionIndex) {\n        editorRenderer_1.EditorRenderer.OPTION_OFFSET_X;\n        return (graphNode.editor.position.x + editorRenderer_1.EditorRenderer.OPTION_OFFSET_X <= pos.x &&\n            graphNode.editor.position.y + (optionIndex + 1) * this.boxSize.height <= pos.y &&\n            graphNode.editor.position.x + editorRenderer_1.EditorRenderer.OPTION_OFFSET_X + this.boxSize.width > pos.x &&\n            graphNode.editor.position.y + (optionIndex + 1) * this.boxSize.height + this.boxSize.height > pos.y);\n    };\n    EditorHelper.prototype.locateNodeBoxNameAtPos = function (pos) {\n        for (var nodeName in this.dialogConfigWithPositions.graph) {\n            var graphNode = this.dialogConfigWithPositions.graph[nodeName];\n            if (this.isPosInGraphNodeBox(pos, graphNode)) {\n                return nodeName;\n            }\n        }\n        return null;\n    };\n    EditorHelper.prototype.locateOptionBoxNameAtPos = function (pos) {\n        for (var nodeName in this.dialogConfigWithPositions.graph) {\n            var graphNode = this.dialogConfigWithPositions.graph[nodeName];\n            for (var i = 0; i < graphNode.o.length; i++) {\n                if (this.isPosInOptionNodeBox(pos, graphNode, i)) {\n                    return { nodeName: nodeName, node: graphNode, optionIndex: i };\n                }\n            }\n        }\n        return null;\n    };\n    EditorHelper.prototype.isNodeHighlighted = function (nodName) {\n        return this.highlightedNodeName === nodName;\n    };\n    EditorHelper.prototype.isOptionHighlighted = function (nodeName, optionIndex) {\n        return (this.hightlightedOption &&\n            this.hightlightedOption.nodeName === nodeName &&\n            this.hightlightedOption.optionIndex === optionIndex);\n    };\n    EditorHelper.prototype.isOptionSelected = function (nodeName, optionIndex) {\n        return this.selectedOption && this.selectedOption.nodeName === nodeName && this.selectedOption.optionIndex === optionIndex;\n    };\n    EditorHelper.prototype.addNewDialogueNode = function () {\n        // Place two box units to the right if currently there is a selected node.\n        // Otherwise random position.\n        var position = this.selectedNode\n            ? {\n                x: this.selectedNode.editor.position.x + 2 * this.boxSize.width,\n                y: this.selectedNode.editor.position.y + this.boxSize.height\n            }\n            : this.getRandomPosition();\n        var nodeName = this.randomNodeKey();\n        var newNode = {\n            q: \"\",\n            o: [{ a: \"\", next: null }],\n            editor: {\n                position: position\n            }\n        };\n        this.dialogConfigWithPositions.graph[nodeName] = newNode;\n        this.selectedNodeName = nodeName;\n        this.selectedNode = newNode;\n        this.domHelper.showAnswerOptions(nodeName, newNode);\n        this.pb.redraw();\n    };\n    EditorHelper.prototype.removeNewDialogueNode = function (nodeName) {\n        delete this.dialogConfigWithPositions.graph[nodeName];\n        this.selectedNodeName = null;\n        this.selectedNode = null;\n        this.domHelper.showAnswerOptions(null, null);\n        this.pb.redraw();\n    };\n    EditorHelper.prototype.boxMovehandler = function () {\n        var _this = this;\n        var _self = this;\n        // +---------------------------------------------------------------------------------\n        // | Add a mouse listener to track the mouse position.\n        // +-------------------------------\n        var mouseDownPos = null;\n        var lastMouseDownPos = null;\n        var draggingNode = null;\n        var draggingNodeName = null;\n        var handler = new plotboilerplate_1.MouseHandler(this.pb.eventCatcher)\n            .down(function (evt) {\n            mouseDownPos = _this.pb.transformMousePosition(evt.params.mouseDownPos.x, evt.params.mouseDownPos.y);\n            lastMouseDownPos = { x: evt.params.mouseDownPos.x, y: evt.params.mouseDownPos.y };\n            draggingNodeName = _this.locateNodeBoxNameAtPos(mouseDownPos);\n            if (draggingNodeName) {\n                draggingNode = _this.dialogConfigWithPositions.graph[draggingNodeName];\n            }\n        })\n            .up(function (_evt) {\n            mouseDownPos = null;\n            draggingNode = null;\n        })\n            .drag(function (evt) {\n            if (!mouseDownPos || !draggingNode) {\n                return;\n            }\n            // const diff = evt.params.dragAmount;\n            draggingNode.editor.position.x += evt.params.dragAmount.x / _this.pb.draw.scale.x;\n            draggingNode.editor.position.y += evt.params.dragAmount.y / _this.pb.draw.scale.y;\n        })\n            .move(function (evt) {\n            // console.log(\"move\", evt);\n            // Check if mouse pointer hovers over an option -> set highlighted\n            var mouseMovePos = _this.pb.transformMousePosition(evt.params.pos.x, evt.params.pos.y);\n            _self.relativeMousePosition = { x: mouseMovePos.x, y: mouseMovePos.y };\n            var hoveringOptionIdentifyer = _this.locateOptionBoxNameAtPos(mouseMovePos);\n            // Can be null\n            _self.setHighlightedOption(hoveringOptionIdentifyer);\n            if (!hoveringOptionIdentifyer) {\n                // Check if hover on graph node\n                var hoveringNodeName = _this.locateNodeBoxNameAtPos(mouseMovePos);\n                _this.setHighlightedNode(hoveringNodeName);\n            }\n            else {\n                _this.setHighlightedNode(null);\n            }\n        })\n            .click(function (evt) {\n            // Stop if mouse was moved\n            console.log(\"lastMouseDownPos\", lastMouseDownPos, \" evt.params.pos\", evt.params.pos);\n            if (lastMouseDownPos && (lastMouseDownPos.x !== evt.params.pos.x || lastMouseDownPos.y !== evt.params.pos.y)) {\n                return;\n            }\n            // Check if mouse pointer hovers over an option -> set selected AND select node\n            var mouseClickPos = _this.pb.transformMousePosition(evt.params.pos.x, evt.params.pos.y);\n            _self.handleClick(mouseClickPos);\n        });\n        return handler;\n    };\n    EditorHelper.prototype.handleClick = function (mouseClickPos) {\n        var clickedOptionIdentifyer = this.locateOptionBoxNameAtPos(mouseClickPos);\n        if (clickedOptionIdentifyer) {\n            this.setSelectedOption(clickedOptionIdentifyer);\n        }\n        else {\n            // Otherwise (no option was clicked) check if a node was clicked directly.\n            var clickedNodeName = this.locateNodeBoxNameAtPos(mouseClickPos);\n            console.log(\"Click\", clickedNodeName);\n            if (clickedNodeName) {\n                if (this.selectedOption) {\n                    this.handleOptionReconnect(clickedNodeName);\n                    this.pb.redraw();\n                }\n                else {\n                    this.setSelectedNode(clickedNodeName, this.dialogConfigWithPositions.graph[clickedNodeName]);\n                    // this.pb.redraw();\n                }\n            }\n            else {\n                this.setSelectedNode(null, null);\n                // this.selectedNode = null;\n                // this.pb.redraw();\n            }\n            this.setSelectedOption(null, false);\n        }\n    };\n    EditorHelper.prototype.handleOptionReconnect = function (clickedNodeName) {\n        if (!this.selectedOption) {\n            // Actually this fuction should not be called at all in that case.\n            console.warn(\"Warn: cannot reconnect option when no option is selected.\");\n        }\n        var graph = this.dialogConfigWithPositions.graph;\n        var clickedNode = graph[clickedNodeName];\n        var sourceNode = this.selectedOption.node;\n        console.log(\"Reconnect\");\n        sourceNode.o[this.selectedOption.optionIndex].next = clickedNodeName;\n        this.domHelper.showAnswerOptions(this.selectedNodeName, this.selectedNode);\n    };\n    EditorHelper.prototype.isEqualOptionIdentifyer = function (identA, identB) {\n        if ((!identA && identB) || (identA && !identB)) {\n            return false;\n        }\n        if ((typeof identA === \"undefined\" && typeof identB !== \"undefined\") ||\n            (typeof identA !== \"undefined\" && typeof identB === \"undefined\")) {\n            return false;\n        }\n        if (identA === identB || (typeof identA === \"undefined\" && typeof identB === \"undefined\")) {\n            return true;\n        }\n        return identA.nodeName === identB.nodeName && identA.optionIndex === identB.optionIndex;\n    };\n    EditorHelper.prototype.renameGraphNode = function (oldName, newName) {\n        if (!this.dialogConfigWithPositions.graph.hasOwnProperty(oldName)) {\n            console.warn(\"Warning: cannot rename node, because old name does not exist.\", oldName);\n            return false;\n        }\n        if (oldName === \"intro\") {\n            console.warn(\"Warning: cannot rename node, because 'intro' must not be renamed'.\");\n            return false;\n        }\n        if (this.dialogConfigWithPositions.graph.hasOwnProperty(newName)) {\n            console.warn(\"Warning: cannot rename node, because new name already exists.\", newName);\n            return false;\n        }\n        if (newName === oldName) {\n            console.warn(\"Warning: cannot rename node, because old name and new name are the same.\", oldName);\n            return false;\n        }\n        var graphNode = this.dialogConfigWithPositions.graph[oldName];\n        this.dialogConfigWithPositions.graph[newName] = graphNode;\n        delete this.dialogConfigWithPositions.graph[oldName];\n        // Update all references\n        for (var nodeName in this.dialogConfigWithPositions.graph) {\n            if (!this.dialogConfigWithPositions.graph.hasOwnProperty(nodeName)) {\n                continue;\n            }\n            var tmpNode = this.dialogConfigWithPositions.graph[nodeName];\n            for (var j = 0; j < tmpNode.o.length; j++) {\n                if (tmpNode.o[j].next === oldName) {\n                    tmpNode.o[j].next = newName;\n                }\n            }\n        }\n        // Update local selected fields\n        if (oldName === this.selectedNodeName) {\n            this.selectedNodeName = newName;\n            this.selectedNode = this.dialogConfigWithPositions.graph[newName];\n        }\n        this.pb.redraw();\n        return true;\n    };\n    EditorHelper.ellipsify = function (text, maxLength) {\n        if (!text || text.length <= maxLength) {\n            return text;\n        }\n        return \"\".concat(text.substring(0, maxLength), \"...\");\n    };\n    EditorHelper.fromObject = function (object) {\n        // Must be of type object\n        if (typeof object !== \"object\") {\n            throw \"Cannot convert non-objects to dialogue config: type is \".concat(typeof object, \".\");\n        }\n        // Must have a 'graph' member.\n        if (!object.hasOwnProperty(\"graph\")) {\n            throw \"Cannot convert object to dialogue config: object missing member `graph`.\";\n        }\n        var graph = object[\"graph\"];\n        // Check if 'intro' is present?\n        // All members must be of correct type\n        for (var key in object) {\n            if (!object.hasOwnProperty(key)) {\n                continue;\n            }\n            var questionaire = object[key];\n            if (typeof questionaire !== \"object\") {\n                throw \"Cannot converto bject to dialogue config: all graph members must be objects.\";\n            }\n            // Check if 'q' (string) and 'o' (array) attributes are present?\n        }\n        return object;\n    };\n    EditorHelper.removePositions = function (dialogueConfig) {\n        var clone = JSON.parse(JSON.stringify(dialogueConfig));\n        for (var nodeName in clone.graph) {\n            var node = clone.graph[nodeName];\n            if (node.hasOwnProperty(\"editor\")) {\n                delete node[\"editor\"];\n            }\n        }\n        return clone;\n    };\n    EditorHelper.prototype.randomNodeKey = function () {\n        var keys = Object.keys(this.dialogConfigWithPositions.graph);\n        var count = keys.length;\n        var key = \"New \" + count;\n        while (this.dialogConfigWithPositions.graph.hasOwnProperty(key)) {\n            key = \"New \" + count;\n            count++;\n        }\n        return key;\n    };\n    return EditorHelper;\n}());\nexports.EditorHelper = EditorHelper;\n//# sourceMappingURL=editorHelpers.js.map","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EditorRenderer = void 0;\n/**\n * A renderer for the graph editor.\n *\n * @require PlotBoilerplate\n *\n * @author   Ikaros Kappler\n * @date     2023-07-28\n * @version  1.0.0\n **/\nvar plotboilerplate_1 = require(\"plotboilerplate\");\nvar editorHelpers_1 = require(\"./editorHelpers\");\nvar getContrastColor_1 = require(\"plotboilerplate/src/cjs/utils/algorithms/getContrastColor\");\nvar Color_1 = require(\"plotboilerplate/src/cjs/utils/datastructures/Color\");\n// import { FileDrop } from \"plotboilerplate/src/cjs/utils/io/FileDrop\";\nvar EditorRenderer = /** @class */ (function () {\n    function EditorRenderer(pb, boxSize, editorHelpers, isDarkmode) {\n        this.TEXT_MAX_LENGTH = 20;\n        this.pb = pb;\n        this.boxSize = boxSize;\n        this.editorHelpers = editorHelpers;\n        this.fontOptions = {\n            color: \"black\",\n            fontFamily: \"Arial\",\n            fontSize: 12,\n            fontStyle: \"italic\",\n            fontWeight: \"normal\",\n            lineHeight: 26,\n            textAlign: \"left\",\n            rotation: 0\n        };\n        var backgroundColor = isDarkmode ? Color_1.Color.parse(\"#000000\") : Color_1.Color.parse(\"#ffffff\");\n        this.fontOptions.color = (0, getContrastColor_1.getContrastColor)(backgroundColor).setAlpha(0.8).cssRGBA();\n    }\n    EditorRenderer.prototype.renderBoxes = function (dialogConfig) {\n        var nodeNames = Object.keys(dialogConfig.graph);\n        var count = nodeNames.length;\n        for (var i = 0; i < count; i++) {\n            var nodeName = nodeNames[i];\n            var graphNode = dialogConfig.graph[nodeName];\n            this.renderGraphNode(nodeName, graphNode);\n            this.renderOptions(nodeName, graphNode);\n        }\n        // Render suggested new connection\n        this.renderSuggestedConnection();\n    };\n    EditorRenderer.prototype.renderSuggestedConnection = function () {\n        if (this.editorHelpers.selectedOption) {\n            var isMousePosInsideOption = this.editorHelpers.isPosInOptionNodeBox(this.editorHelpers.relativeMousePosition, this.editorHelpers.selectedOption.node, this.editorHelpers.selectedOption.optionIndex);\n            var bezierTargetPosition = this.editorHelpers.highlightedNode\n                ? this.editorHelpers.highlightedNode.editor.position\n                : isMousePosInsideOption\n                    ? null\n                    : this.editorHelpers.relativeMousePosition;\n            if (bezierTargetPosition) {\n                this.drawBezierConnection(this.editorHelpers.selectedOption.node, this.editorHelpers.selectedOption.optionIndex, bezierTargetPosition, true, true);\n            }\n        }\n    };\n    EditorRenderer.prototype.renderGraphNode = function (nodeName, graphNode) {\n        var isNodeSelected = this.editorHelpers.selectedNodeName === nodeName;\n        var isNodeHighlighted = this.editorHelpers.isNodeHighlighted(nodeName);\n        this.pb.fill.text(nodeName, graphNode.editor.position.x, graphNode.editor.position.y - this.boxSize.height, __assign(__assign({}, this.fontOptions), { color: \"grey\" }));\n        this.pb.draw.rect(graphNode.editor.position, this.boxSize.width, this.boxSize.height, isNodeSelected ? \"rgba(255,128,0,1.0)\" : \"rgba(0,255,0,1.0)\", 1.0);\n        // Show initial and terminal nodes with fill color\n        if (!graphNode.o || graphNode.o.length === 0 || nodeName === \"intro\" || isNodeHighlighted) {\n            this.pb.fill.rect({ x: graphNode.editor.position.x, y: graphNode.editor.position.y }, this.boxSize.width, this.boxSize.height, isNodeHighlighted ? \"rgba(255,128,0,0.5)\" : isNodeSelected ? \"rgba(255,128,0,0.3)\" : \"rgba(0,255,0,0.3)\", 1.0);\n        }\n        this.pb.fill.text(graphNode.q ? (isNodeSelected ? graphNode.q : editorHelpers_1.EditorHelper.ellipsify(graphNode.q, this.TEXT_MAX_LENGTH)) : \"-no text-\", graphNode.editor.position.x, graphNode.editor.position.y, this.fontOptions);\n    };\n    EditorRenderer.prototype.renderOptions = function (nodeName, graphNode) {\n        var isNodeSelected = this.editorHelpers.selectedNodeName === nodeName;\n        var offsetY = graphNode.editor.position.y + this.boxSize.height;\n        var offsetX = graphNode.editor.position.x + EditorRenderer.OPTION_OFFSET_X;\n        for (var j = 0; j < graphNode.o.length; j++) {\n            var option = graphNode.o[j];\n            // Render highlighted option?\n            var otherOptionIsSelected = this.editorHelpers.selectedOption !== null && !this.editorHelpers.isOptionSelected(nodeName, j);\n            var isHighlighted = !otherOptionIsSelected && this.editorHelpers.isOptionHighlighted(nodeName, j);\n            var isSelected = this.editorHelpers.isOptionSelected(nodeName, j);\n            if (isHighlighted || isSelected) {\n                this.pb.fill.rect({ x: offsetX, y: offsetY }, this.boxSize.width, this.boxSize.height, \"rgba(255,192,0,0.5)\", 1);\n            }\n            this.pb.draw.rect({ x: offsetX, y: offsetY }, this.boxSize.width, this.boxSize.height, \"grey\", 1);\n            this.pb.fill.text(option.a ? (isNodeSelected ? option.a : editorHelpers_1.EditorHelper.ellipsify(option.a, this.TEXT_MAX_LENGTH)) : \"-no text-\", offsetX, offsetY, __assign(__assign({}, this.fontOptions), { color: isHighlighted || isSelected ? \"black\" : \"grey\" }));\n            if (isHighlighted || isSelected) {\n                // Draw connect indicator when highlighted\n                var zA = new plotboilerplate_1.Vertex(graphNode.editor.position).addXY(this.boxSize.width + 16, this.boxSize.height / 2.0 + (j + 1) * (this.boxSize.height + 2) - 2);\n                this.pb.fill.circle(zA, 5, \"orange\");\n            }\n            offsetY += this.boxSize.height + 2;\n        }\n    };\n    EditorRenderer.prototype.renderConnections = function (dialogConfig) {\n        var nodeNames = Object.keys(dialogConfig.graph);\n        var count = nodeNames.length;\n        for (var i = 0; i < count; i++) {\n            var nodeName = nodeNames[i];\n            var graphNode = dialogConfig.graph[nodeName];\n            for (var j = 0; j < graphNode.o.length; j++) {\n                var successorName = graphNode.o[j].next;\n                if (!successorName) {\n                    continue;\n                }\n                var successorNode = dialogConfig.graph[successorName];\n                if (!successorNode) {\n                    continue;\n                }\n                var isHighlighted = this.editorHelpers.isOptionHighlighted(nodeName, j);\n                var otherOptionIsSelected = this.editorHelpers.selectedOption !== null && !this.editorHelpers.isOptionSelected(nodeName, j);\n                var isSelected = this.editorHelpers.isOptionSelected(nodeName, j);\n                // this.drawLinearConnection(graphNode, successorNode, j);\n                this.drawBezierConnection(graphNode, j, successorNode.editor.position, isHighlighted && !otherOptionIsSelected, isSelected);\n            }\n        }\n    };\n    EditorRenderer.prototype.drawBezierConnection = function (graphNode, j, successorNodePosition, isHighlighted, isSelected) {\n        // Construct Bézier handles.\n        var zA = new plotboilerplate_1.Vertex(graphNode.editor.position).addXY(this.boxSize.width + 16, this.boxSize.height / 2.0 + (j + 1) * (this.boxSize.height + 2) - 2);\n        var zB = new plotboilerplate_1.Vertex(successorNodePosition);\n        var cA = zA.clone().addXY(50, 0);\n        var cB = zB.clone().subXY(50, 50);\n        var isCanvas = this.pb.canvas instanceof HTMLCanvasElement;\n        if (isCanvas) {\n            // Maybe future versions of PlotBoilerplate support this for Canvas & SVG nodes\n            if (isHighlighted) {\n                this.pb.draw.ctx.setLineDash([10, 6]);\n            }\n            else {\n                this.pb.draw.ctx.setLineDash([0]);\n            }\n        }\n        this.cubicBezierArrow(zA, zB, cA, cB, isHighlighted || isSelected ? \"rgba(0,192,255,0.5)\" : \"rgba(255,192,0,0.5)\", 2);\n        if (isCanvas) {\n            this.pb.draw.ctx.setLineDash([0]);\n        }\n    };\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    EditorRenderer.prototype.cubicBezierArrow = function (zA, zB, cA, cB, color, lineWidth) {\n        var _this = this;\n        var headlen = 8; // length of head in pixels\n        var vertices = plotboilerplate_1.Vertex.utils\n            .buildArrowHead(cB, zB, headlen, 1.0, 1.0) // this.pb.draw.scale.x, this.pb.draw.scale.y);\n            .map(function (vertex) {\n            return vertex.scale(1.0 / _this.pb.draw.scale.x, zB);\n        });\n        this.pb.draw.cubicBezier(zA, zB, cA, cB, color, lineWidth);\n        this.pb.fill.polyline(vertices, false, color, lineWidth);\n        // Draw bezier control lines?\n        // this.pb.draw.line(zA, cA, \"grey\", 1);\n        // this.pb.draw.line(zB, cB, \"grey\", 1);\n    };\n    EditorRenderer.OPTION_OFFSET_X = 16;\n    return EditorRenderer;\n}());\nexports.EditorRenderer = EditorRenderer;\n//# sourceMappingURL=editorRenderer.js.map","// import { detectDarkMode } from \"./detectDarkMode\";\n// import { RPGDOMHelpers } from \"./domHelpers\";\n// import { EditorHelper } from \"./editorHelpers\";\n// import { Editor } from \"./Editor\";\n// import { gup } from \"./gup\";\n// import { DialogueMetaHelpers } from \"./metaHelpers\";\n// import { Modal } from \"./modal\";\n// import { RPGDialogueLogic } from \"./RPGDialogueLogic\";\n// import { TouchHandler } from \"./TouchHandler\";\n\n// export const RPG = {\n//   detectDarkMode: detectDarkMode,\n//   RPGDOMHelpers: RPGDOMHelpers,\n//   Editor: Editor,\n//   EditorHelper: EditorHelper,\n//   gup: gup,\n//   DialogueMetaHelpers: DialogueMetaHelpers,\n//   Modal: Modal,\n//   RPGDialogueLogic: RPGDialogueLogic,\n//   TouchHandler: TouchHandler\n// };\n\n// globalThis.RPGDOMHelpers = RPGDOMHelpers;\n// globalThis.Editor = Editor;\n// globalThis.EditorHelper = EditorHelper;\n// globalThis.gup = gup;\n// globalThis.DialogueMetaHelpers = DialogueMetaHelpers;\n// globalThis.globalThisModal = globalThisModal;\n// globalThis.RPGDialogueLogic = RPGDialogueLogic;\n// globalThis.TouchHandler = TouchHandler;\n\n// import { detectDarkMode } from \"./detectDarkMode\";\n// import { RPGDOMHelpers } from \"./domHelpers\";\n// import { EditorHelper } from \"./editorHelpers\";\n// import { Editor } from \"./Editor\";\n// import { gup } from \"./gup\";\n// import { DialogueMetaHelpers } from \"./metaHelpers\";\n// import { Modal } from \"./modal\";\n// import { RPGDialogueLogic } from \"./RPGDialogueLogic\";\n// import { TouchHandler } from \"./TouchHandler\";\n\nglobalThis.gup = require(\"./gup\").gup;\nconsole.log(\"gup\", gup);\nglobalThis.detectDarkMode = require(\"./detectDarkMode\").detectDarkMode;\nglobalThis.RPGDialogueLogic = require(\"./RPGDialogueLogic\").RPGDialogueLogic;\nglobalThis.RPGDOMHelpers = require(\"./domHelpers\").RPGDOMHelpers;\nglobalThis.DialogueMetaHelpers = require(\"./metaHelpers\").DialogueMetaHelpers;\nglobalThis.Modal = require(\"./modal\").Modal;\nglobalThis.EditorHelper = require(\"./editorHelpers\").EditorHelper;\nglobalThis.TouchHandler = require(\"./TouchHandler\").TouchHandler;\nglobalThis.Editor = require(\"./Editor\").Editor;\n\nconsole.log(\"Editor\", Editor);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.gup = void 0;\n// Get the URI GET params as an assoc.\n//\n// A nicer version with regex\n// Found at\n//    https://stackoverflow.com/questions/979975/how-to-get-the-value-from-the-get-parameters?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\nvar gup = function () {\n    var vars = {};\n    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (_m, key, value) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        vars[key] = value;\n        return value;\n    });\n    return vars;\n};\nexports.gup = gup;\n//# sourceMappingURL=gup.js.map","\"use strict\";\n/**\n * Helper to edit dialogue meta data.\n *\n * @author  Ikaros Kappler\n * @date    2023-08-09\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DialogueMetaHelpers = void 0;\nvar modal_1 = require(\"./modal\");\nvar DialogueMetaHelpers = /** @class */ (function () {\n    function DialogueMetaHelpers(editorHelpers) {\n        this.editorHelpers = editorHelpers;\n        document.getElementById(\"b-configure-meta\").addEventListener(\"click\", this.handleModalOpen());\n    }\n    DialogueMetaHelpers.prototype.handleModalOpen = function () {\n        var _this = this;\n        var _self = this;\n        return function () {\n            _self.metaCopy = DialogueMetaHelpers.cloneMeta(_this.editorHelpers.dialogConfigWithPositions.meta);\n            _self.editorHelpers.domHelper.modal.setTitle(\"Dialogue Config Meta Data\");\n            _self.editorHelpers.domHelper.modal.setBody(_self.buildMetaBody());\n            _self.editorHelpers.domHelper.modal.setFooter(\"\");\n            _self.editorHelpers.domHelper.modal.setActions([{ label: \"Save\", action: _self.handleSave() }, modal_1.Modal.ACTION_CANCEL]);\n            _self.editorHelpers.domHelper.modal.open();\n        };\n    };\n    DialogueMetaHelpers.prototype.updateModalBody = function () {\n        var newBody = this.buildMetaBody();\n        this.editorHelpers.domHelper.modal.setBody(newBody);\n    };\n    DialogueMetaHelpers.prototype.buildMetaBody = function () {\n        var metaBody = document.createElement(\"div\");\n        this.inputName = document.createElement(\"input\");\n        this.inputName.value = this.metaCopy.name;\n        this.inputName.addEventListener(\"change\", this.handleUpdateMetaName());\n        var nameLabel = document.createElement(\"div\");\n        nameLabel.innerHTML = \"Dialogue name\";\n        var npcContainer = document.createElement(\"div\");\n        npcContainer.classList.add(\"e-meta-npccontainer\");\n        this.inputsNpcNames = [];\n        for (var i = 0; i < this.metaCopy.npcs.length; i++) {\n            var container = document.createElement(\"div\");\n            var label = document.createElement(\"div\");\n            label.innerHTML = \"NPC #\".concat(i);\n            var npcNameInput = document.createElement(\"input\");\n            npcNameInput.value = this.metaCopy.npcs[i].name;\n            npcNameInput.addEventListener(\"change\", this.handleNpcNameChange(i));\n            var btnRemove = document.createElement(\"button\");\n            btnRemove.innerHTML = \"&#x1F5D1;\";\n            btnRemove.addEventListener(\"click\", this.handleDeleteNpc(i));\n            container.appendChild(label);\n            container.appendChild(npcNameInput);\n            container.appendChild(btnRemove);\n            npcContainer.appendChild(container);\n            this.inputsNpcNames.push(npcNameInput);\n        }\n        var btnAddNpc = document.createElement(\"button\");\n        btnAddNpc.innerHTML = \"Add NPC\";\n        btnAddNpc.addEventListener(\"click\", this.handleAddNpc());\n        metaBody.appendChild(nameLabel);\n        metaBody.appendChild(this.inputName);\n        metaBody.appendChild(npcContainer);\n        metaBody.appendChild(btnAddNpc);\n        return metaBody;\n    };\n    DialogueMetaHelpers.prototype.handleUpdateMetaName = function () {\n        var _self = this;\n        return function (event) {\n            _self.metaCopy.name = event.target.value;\n        };\n    };\n    DialogueMetaHelpers.prototype.handleNpcNameChange = function (index) {\n        var _self = this;\n        return function (event) {\n            _self.metaCopy.npcs[index].name = event.target.value;\n        };\n    };\n    DialogueMetaHelpers.prototype.handleDeleteNpc = function (index) {\n        var _self = this;\n        return function () {\n            _self.metaCopy.npcs.splice(index, 1);\n            _self.updateModalBody();\n        };\n    };\n    DialogueMetaHelpers.prototype.handleAddNpc = function () {\n        var _self = this;\n        return function () {\n            _self.metaCopy.npcs.push({ name: \"New NPC\" });\n            _self.updateModalBody();\n        };\n    };\n    DialogueMetaHelpers.prototype.handleSave = function () {\n        var _self = this;\n        return function () {\n            _self.editorHelpers.dialogConfigWithPositions.meta = _self.metaCopy;\n            _self.editorHelpers.domHelper.modal.close();\n            _self.editorHelpers.domHelper.updateNpcSelector();\n        };\n    };\n    DialogueMetaHelpers.cloneMeta = function (meta) {\n        var copy = {};\n        copy.name = meta.name;\n        copy.npcs = [];\n        for (var i = 0; i < meta.npcs.length; i++) {\n            copy.npcs.push({ name: meta.npcs[i].name });\n        }\n        return copy;\n    };\n    return DialogueMetaHelpers;\n}());\nexports.DialogueMetaHelpers = DialogueMetaHelpers;\n//# sourceMappingURL=metaHelpers.js.map","\"use strict\";\n/**\n * Original source: https://www.w3schools.com/howto/howto_css_modals.asp\n *\n * @requires modal.css\n *\n * Converted to a class by\n * @author   Ikaros Kappler\n * @date     2020-09-14\n * @modified 2023-08-09 Ported to typescript.\n * @version  1.1.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Modal = void 0;\nvar Modal = /** @class */ (function () {\n    function Modal() {\n        this.modalElements = this.buildDOMNode(\"myModal-\" + Modal.MODAL_COUNTER++);\n    }\n    Modal.prototype.setTitle = function (title) {\n        this.modalElements.modal.header.content.innerHTML = title;\n    };\n    Modal.prototype.setBody = function (bodyContent) {\n        if (Modal.isDOMNode(bodyContent)) {\n            Modal.removeChildNodes(this.modalElements.modal.body.content);\n            this.modalElements.modal.body.content.append(bodyContent);\n        }\n        else {\n            this.modalElements.modal.body.content.innerHTML = bodyContent;\n        }\n    };\n    Modal.prototype.setFooter = function (title) {\n        if (typeof title === \"string\") {\n            this.modalElements.modal.footer.content.innerHTML = title.length == 0 ? \"&nbsp;\" : title;\n        }\n        else {\n            console.log(\"Footer elements?\");\n        }\n    };\n    Modal.prototype.setActions = function (actions) {\n        var _self = this;\n        Modal.removeChildNodes(this.modalElements.modal.footer.actions);\n        if (Array.isArray(actions)) {\n            for (var i in actions) {\n                var a = actions[i];\n                var cmd = null;\n                var btn = document.createElement(\"button\");\n                btn.innerHTML = a.label;\n                if (typeof a.action === \"function\") {\n                    btn.addEventListener(\"click\", a.action);\n                }\n                else if ((typeof a === \"string\" && (cmd = a) != null) || (typeof a.action === \"string\" && (cmd = a.action) != null)) {\n                    if (cmd === \"cancel\" || cmd === \"ok\" || cmd === \"close\")\n                        btn.addEventListener(\"click\", function () {\n                            _self.close();\n                        });\n                }\n                this.modalElements.modal.footer.actions.appendChild(btn);\n            }\n        }\n    };\n    Modal.prototype.close = function () {\n        this.modalElements.modal.parent.classList.remove(\"modal-opened\");\n        this.modalElements.modal.parent.classList.add(\"modal-closed\");\n    };\n    Modal.prototype.open = function () {\n        this.modalElements.modal.parent.classList.remove(\"modal-closed\");\n        this.modalElements.modal.parent.classList.add(\"modal-opened\");\n    };\n    Modal.prototype.buildDOMNode = function (id) {\n        var _self = this;\n        var modal = document.createElement(\"div\");\n        modal.setAttribute(\"id\", id);\n        modal.classList.add(\"modal\");\n        modal.classList.add(\"modal-closed\");\n        var content = document.createElement(\"div\");\n        content.classList.add(\"modal-content\");\n        var header = document.createElement(\"div\");\n        header.classList.add(\"modal-header\");\n        var closeBtn = document.createElement(\"span\");\n        closeBtn.classList.add(\"modal-close\");\n        closeBtn.innerHTML = \"&times;\";\n        var h2 = document.createElement(\"h2\");\n        h2.innerHTML = \"Modal Header\";\n        var body = document.createElement(\"div\");\n        body.classList.add(\"modal-body\");\n        // Body contents?\n        var bodyContent = document.createElement(\"p\");\n        bodyContent.innerHTML = \"Some text in the Modal Body\";\n        var footer = document.createElement(\"div\");\n        footer.classList.add(\"modal-footer\");\n        var footerContent = document.createElement(\"h3\");\n        var footerActions = document.createElement(\"div\");\n        footerContent.innerHTML = \"Modal Footer\";\n        footerActions.classList.add(\"modal-actions\");\n        footer.appendChild(footerContent);\n        footer.appendChild(footerActions);\n        header.appendChild(closeBtn);\n        header.appendChild(h2);\n        content.appendChild(header);\n        body.appendChild(bodyContent);\n        content.appendChild(body);\n        content.appendChild(footer);\n        modal.appendChild(content);\n        // When the user clicks on <span> (x), close the modal\n        closeBtn.onclick = function () {\n            _self.close();\n        };\n        // Append new modal to body\n        document.getElementsByTagName(\"body\")[0].appendChild(modal);\n        return {\n            modal: {\n                id: id,\n                parent: modal,\n                header: {\n                    closeBtn: closeBtn,\n                    content: h2\n                },\n                body: { content: bodyContent },\n                footer: {\n                    content: footerContent,\n                    actions: footerActions\n                }\n            }\n        };\n    };\n    // https://stackoverflow.com/questions/384286/how-do-you-check-if-a-javascript-object-is-a-dom-object\n    Modal.isDOMNode = function (obj) {\n        try {\n            //Using W3 DOM2 (works for FF, Opera and Chrome)\n            return obj instanceof HTMLElement;\n        }\n        catch (e) {\n            //Browsers not supporting W3 DOM2 don't have HTMLElement and\n            //an exception is thrown and we end up here. Testing some\n            //properties that all elements have (works on IE7)\n            return (typeof obj === \"object\" && obj.nodeType === 1 && typeof obj.style === \"object\" && typeof obj.ownerDocument === \"object\");\n        }\n    };\n    Modal.ACTION_CLOSE = { label: \"Close\", action: \"close\" };\n    Modal.ACTION_CANCEL = { label: \"Cancel\", action: \"close\" };\n    Modal.ACTION_OK = { label: \"OK\", action: \"close\" };\n    Modal.MODAL_COUNTER = 0;\n    Modal.removeChildNodes = function (node) {\n        // Remove all current actions\n        while (node.firstChild) {\n            node.removeChild(node.lastChild);\n        }\n    };\n    return Modal;\n}());\nexports.Modal = Modal;\n//# sourceMappingURL=modal.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkrpg_dialogue\"] = self[\"webpackChunkrpg_dialogue\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./dist/cjs/entry.js\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}